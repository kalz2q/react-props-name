// timetravel (last)
import React, { useState, useEffect } from "react";
import "./App.css";

type SquareState = "O" | "X" | "";

type SquareProps = {
  value: SquareState;
  onClick: () => void;
};

const Square = (props: SquareProps) => {
  return (
    <button className="square" onClick={() => props.onClick()}>
      {props.value}
    </button>
  );
};

type BoardState = [
  SquareState,
  SquareState,
  SquareState,
  SquareState,
  SquareState,
  SquareState,
  SquareState,
  SquareState,
  SquareState
];

type BoardProps = {
  squares: BoardState;
  onClick: (i: number) => void;
};

const Board = (props: BoardProps) => {
  const renderSquare = (i: number) => {
    return <Square value={props.squares[i]} onClick={() => props.onClick(i)} />;
  };

  return (
    <div>
      <div className="board-row">
        <>
          {renderSquare(0)}
          {renderSquare(1)}
          {renderSquare(2)}
        </>
      </div>
      <div className="board-row">
        <>
          {renderSquare(3)}
          {renderSquare(4)}
          {renderSquare(5)}
        </>
      </div>
      <div className="board-row">
        <>
          {renderSquare(6)}
          {renderSquare(7)}
          {renderSquare(8)}
        </>
      </div>
    </div>
  );
};

type Step = {
  squares: BoardState;
};

type GameState = {
  history: Step[];
  stepNumber: number;
  xIsNext: boolean;
};

const App = () => {
  useEffect(() => {
    document.title = "react-tictactoe-liftup-history";
  });

  const [state, setState] = useState<GameState>({
    history: [
      {
        squares: ["", "", "", "", "", "", "", "", ""],
      },
    ],
    stepNumber: 0,
    xIsNext: true,
  });

  const handleClick = (i: number) => {
    const newSquares: [
      SquareState,
      SquareState,
      SquareState,
      SquareState,
      SquareState,
      SquareState,
      SquareState,
      SquareState,
      SquareState
    ] = ["", "", "", "", "", "", "", "", ""];

    const history = state.history.slice(0, state.stepNumber + 1);
    const current = history[history.length - 1];
    current.squares.forEach((value, j) => {
      newSquares[j] = value;
    });

    if (calculateWinner(current.squares) || current.squares[i] !== "") {
      return;
    }
    newSquares[i] = state.xIsNext ? "X" : "O";
    setState({
      history: history.concat([
        {
          squares: newSquares,
        },
      ]),
      stepNumber: history.length,
      xIsNext: !state.xIsNext,
    });
  };

  const history = state.history;
  const current = history[state.stepNumber];
  const winner = calculateWinner(current.squares);

  const jumpTo = (step: number) => {
    setState((prev) => ({
      ...prev,
      stepNumber: step,
      xIsNext: step % 2 === 0,
    }));
  };

  const moves = history.map((step, move) => {
    const desc = move ? "Go to move #" + move : "Go to game start";
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{desc}</button>
      </li>
    );
  });

  let statusNow: string;
  if (winner) {
    statusNow = "Winner: " + winner;
  } else {
    statusNow = "Next player: " + (state.xIsNext ? "X" : "O");
  }

  return (
    <div className="game">
      <div className="game-board">
        <Board
          squares={current.squares}
          onClick={(i: number) => handleClick(i)}
        />
      </div>
      <div className="game-info">
        <div>{statusNow}</div>
        <ol>{moves}</ol>
      </div>
    </div>
  );
};

// ========================================

const calculateWinner = (squares: SquareState[]) => {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
};

// ========================================

export default App;
